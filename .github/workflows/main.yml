name: Django CI

on:
  push:
    branches: [ "main", "rostbranch" ]
  pull_request:
    branches: [ "main", "rostbranch" ]

jobs:
  scan:
    runs-on: ubuntu-latest
    steps:
      # Checkout the repo
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Set up Python (for Django + Bandit + coverage)
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      # Install dependencies
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install bandit coverage pytest pytest-cov

      # Run Bandit for security analysis
      - name: Run Bandit
        run: |
          bandit --format json --output $GITHUB_WORKSPACE/bandit-report.json --recursive $GITHUB_WORKSPACE/ || echo

      # Run coverage using coverage.py (Django compatible)
      - name: Run Coverage (coverage.py)
        run: |
          mkdir -p coverage-report
          coverage run manage.py test
          coverage xml -o coverage-report/coverage.xml
          coverage report

      # Optional: Run coverage with pytest-cov if using pytest
      - name: Run Coverage and Generate Cobertura XML
        run: |
          mkdir -p coverage-report
          coverage run manage.py test
          coverage xml -o coverage-report/cobertura.xml


      # Run Gitleaks using the CLI (to generate JSON report)
      - name: Run Gitleaks
        run: |
          curl -sSL https://github.com/gitleaks/gitleaks/releases/latest/download/gitleaks-linux-amd64 -o gitleaks
          chmod +x gitleaks
          ./gitleaks detect --source . --report-format json --report-path gitleaks-report.json || true

      - name: Convert Gitleaks report to SonarQube Generic Issue Format
        run: |
          pip install jq
          jq -c '.[]' gitleaks-report.json | while read -r issue; do
            file=$(echo "$issue" | jq -r '.File')
            rule_id=$(echo "$issue" | jq -r '.RuleID')
            desc=$(echo "$issue" | jq -r '.Description')
            start_line=$(echo "$issue" | jq -r '.StartLine // 1')

            echo "$(
              jq -n --arg ruleId "$rule_id" \
                    --arg type "VULNERABILITY" \
                    --arg severity "MAJOR" \
                    --arg message "$desc" \
                    --arg filePath "$file" \
                    --argjson startLine "$start_line" \
              '{
                engineId: "gitleaks",
                ruleId: $ruleId,
                type: $type,
                severity: $severity,
                primaryLocation: {
                  message: $message,
                  filePath: $filePath,
                  textRange: {
                    startLine: $startLine,
                    endLine: $startLine
                  }
                }
              }'
            )"
          done | jq -s '.' > sonar-gitleaks-report.json



      # Run SonarQube Scan
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5.2.0
        with:
          projectBaseDir: .
          args: >
            -Dsonar.projectKey=healthCheck
            -Dsonar.python.bandit.reportPaths=bandit-report.json
            -Dsonar.dependencyCheck.jsonReportPath=dependency-check-report.json
            -Dsonar.python.coverage.reportPaths=coverage-report/cobertura.xml
            -X
        
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_HEALTH_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
    # -Dsonar.externalIssuesReportPaths=sonar-gitleaks-report.json
    # -Dsonar.coverageReportPaths=coverage-report/coverage.xml